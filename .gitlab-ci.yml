stages:
 - test
 - build
 - generate_docker_image
 - redeploy

cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
  - .npm
  - node_modules

unit_test_web:
  image: node:11.10
  stage: test
  before_script:
    - yarn install
  script:
  - npm test -- --coverage

build_web:
  image: node:11.10
  stage: build
  before_script:
  - yarn install
  script:
  - npm run build
  artifacts:
    paths:
    - build # The application is built for production

generate_docker_image_test:
  stage: generate_docker_image
  tags:
  - docker-image-build
  script:
    - pwd
    - ls
    - "echo building $CI_REGISTRY_IMAGE/production" # No empty scripts are allowed
  dependencies:
  - build_web # we'll need the built artifact to build the image
  variables:
    TO: $CI_REGISTRY_IMAGE/production # Where to push resulting image


redeploy_next:
  stage: redeploy
  image: gitlab-registry.cern.ch/paas-tools/openshift-client:latest
  environment:
    name: test
  variables:
    GITLAB_SERVER: gitlab-registry.cern.ch
    GITLAB_NAMESPACE: dialtone
    GITLAB_APP_NAME: phone-logs-analyzer # this is the gitlab repo name
    OPENSHIFT_SERVER: https://openshift-dev.cern.ch # use https://openshift-dev.cern.ch for a Test site
    OPENSHIFT_NAMESPACE: phone-logs-analyzer # this is the name of your Openshift project (i.e. the site name)
    OPENSHIFT_APP_NAME: phone-logs-analyzer # this is the name of the ImageStream/DeploymentConfig objects created by oc new-app. Typically, this will be the name of the GitLab project.
    IMAGE_TYPE: production
    DEPLOYMENT_CONF_NAME: webapp
  script:
  - "oc import-image $OPENSHIFT_APP_NAME --all --server=$OPENSHIFT_SERVER --namespace=$OPENSHIFT_NAMESPACE --from=$GITLAB_SERVER/$GITLAB_NAMESPACE/$GITLAB_APP_NAME/$IMAGE_TYPE --confirm --token=$DEPLOYMENT_TOKEN_TEST"
  # wait a bit for redeployment to happen then monitor the deployment status
  - "sleep 30s && oc rollout status dc/$DEPLOYMENT_CONF_NAME --server=$OPENSHIFT_SERVER --namespace $OPENSHIFT_NAMESPACE --token=$DEPLOYMENT_TOKEN_TEST"

